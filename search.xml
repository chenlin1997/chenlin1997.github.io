<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC数据库连接池</title>
      <link href="/2020/05/29/jdbc-shu-ju-ku-lian-jie-chi/"/>
      <url>/2020/05/29/jdbc-shu-ju-ku-lian-jie-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="多种开源的数据库连接池"><a href="#多种开源的数据库连接池" class="headerlink" title="多种开源的数据库连接池"></a>多种开源的数据库连接池</h2><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li>DBCP 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持。</li><li>C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以。hibernate官方推荐使用</li><li>Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点</li><li>BoneCP 是一个开源组织提供的数据库连接池，速度快</li><li>Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。  </li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h3 id="1-C3P0数据库连接池"><a href="#1-C3P0数据库连接池" class="headerlink" title="1.C3P0数据库连接池"></a>1.C3P0数据库连接池</h3><p>需要的连接池驱动：<a href="c3p0-0.9.1.2.jar">c3p0-0.9.1.2.jar</a></p><ul><li><p>获取连接方式一</p><pre><code>//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐  public void testGetConnection() throws Exception {      //获取c3p0数据库连接池      ComboPooledDataSource cpds = new ComboPooledDataSource();      cpds.setDriverClass( "com.mysql.jdbc.Driver" ); //loads the jdbc driver      cpds.setJdbcUrl( "jdbc:mysql://localhost:3306/test" );      cpds.setUser("root");      cpds.setPassword("cll146185zxc");      //通过设置相关的参数，对数据库连接池进行管理      //设置初始时数据库连接池中的连接数      cpds.setInitialPoolSize(10);      Connection conn = cpds.getConnection();      System.out.println(conn);      //销毁c3p0数据库连接池      //DataSources.destroy(cpds);  }</code></pre></li><li><p>获取连接方式二</p><pre><code>//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐  public void testGetConnection1() throws SQLException {      ComboPooledDataSource cpds = new ComboPooledDataSource("helloc3p0");      Connection conn = cpds.getConnection();      System.out.println(conn);  }</code></pre><p>其中，src下的配置文件为：【c3p0-config.xml】</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;c3p0-config&gt;  &lt;named-config name="helloc3p0"&gt;      &lt;!--提供获取连接的四个基本信息--&gt;      &lt;property name="driverClass"&gt;com.mysql.jdbc.Driver&lt;/property&gt;      &lt;property name="jdbcUrl"&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;      &lt;property name="user"&gt;root&lt;/property&gt;      &lt;property name="password"&gt;cll146185zxc&lt;/property&gt;      &lt;!--进行数据库连接池管理的基本信息--&gt;      &lt;!--当数据库连接池中的连接数不够时，c3p0一次性向数据库服务器申请的连接数--&gt;      &lt;property name="acquireIncrement"&gt;5&lt;/property&gt;      &lt;!--c3p0数据库连接池中初始化的连接数--&gt;      &lt;property name="initialPoolSize"&gt;10&lt;/property&gt;      &lt;!--c3p0数据库连接池维护的最少的连接数--&gt;      &lt;property name="minPoolSize"&gt;10&lt;/property&gt;      &lt;!--c3p0数据库连接池维护的最多的连接数--&gt;      &lt;property name="maxPoolSize"&gt;100&lt;/property&gt;      &lt;!--c3p0数据库连接池最多维护的Statement的个数--&gt;      &lt;property name="maxStatements"&gt;50&lt;/property&gt;      &lt;!--每个连接中可以最多使用的Statement的个数--&gt;      &lt;property name="maxStatementsPerConnection"&gt;2&lt;/property&gt;  &lt;/named-config&gt;&lt;/c3p0-config&gt;</code></pre></li></ul><h3 id="2-DBCP数据库连接池"><a href="#2-DBCP数据库连接池" class="headerlink" title="2.DBCP数据库连接池"></a>2.DBCP数据库连接池</h3><ul><li><p>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Commonpool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：</p><ul><li><a href="commons-dbcp-1.4.jar">Commons-dbcp.jar</a>：连接池的实现</li><li><a href="commons-pool-1.5.5.jar">Commons-pool.jar</a>：连接池实现的依赖库</li></ul></li><li><p>Tomcat 的连接池正是采用该连接池来实现的。该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</p></li><li><p>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</p></li><li><p>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</p></li><li><p>获取连接方式一：</p><pre><code>  public void testGetConnection() throws SQLException {      //创建了DBCP的数据库连接池      BasicDataSource source = new BasicDataSource();      //设置基本信息      source.setDriverClassName("com.mysql.jdbc.Driver");      source.setUrl("jdbc:mysql:///test");      source.setUsername("root");      source.setPassword("cll146185zxc");      //还可以设置其他涉及数据库连接池管理的相关属性      source.setInitialSize(10);      source.setMaxActive(10);      Connection conn = source.getConnection();      System.out.println(conn);  }</code></pre></li><li><p>获取连接方式二：使用配置文件</p><pre><code>  public void testGetConnection1() throws Exception {      Properties pros = new Properties();      //方式一      //InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("dbcp.properties");      //方式二      FileInputStream is = new FileInputStream(new File("src/dbcp.properties"));      pros.load(is);      DataSource source = BasicDataSourceFactory.createDataSource(pros);      Connection conn = source.getConnection();      System.out.println(conn);  }</code></pre><p>其中，src下的配置文件为：【dbcp.properties】</p><pre><code>driverClassName=com.mysql.jdbc.Driverurl=jdbc:mysql:///testusername=rootpassword=#######initialSize=10</code></pre></li></ul><h3 id="3-Druid数据库连接池"><a href="#3-Druid数据库连接池" class="headerlink" title="3.Druid数据库连接池"></a>3.Druid数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong><br>需要在系统中添加：<a href="druid-1.1.10.jar">druid.jar</a></p><pre><code>public class DruidTest {    @Test    public void getConnection() throws Exception {        Properties pros = new Properties();        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("druid.properties");        pros.load(is);        DataSource source = DruidDataSourceFactory.createDataSource(pros);        Connection conn = source.getConnection();        System.out.println(conn);    }}</code></pre><p>其中，src下的配置文件为：【druid.properties】</p><pre><code>url=jdbc:mysql:///testusername=rootpassword=#######driverClassName=com.mysql.jdbc.Driver</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/28/hello-world/"/>
      <url>/2020/05/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
